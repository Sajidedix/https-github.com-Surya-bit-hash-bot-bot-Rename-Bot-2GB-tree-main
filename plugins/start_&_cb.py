
import random
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ForceReply, CallbackQuery
from helper.database import jishubotz
from config import Config, Txt  
  

@Client.on_message(filters.private & filters.command("start"))
async def start(client, message):
    user = message.from_user
    await jishubotz.add_user(client, message)                
    button = InlineKeyboardMarkup([
        [InlineKeyboardButton('·™• ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·™•', url='https://t.me/NARUTOPUBLICST'),
        InlineKeyboardButton('·™• s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·™•', url='https://t.me/SandVillage')],
        [InlineKeyboardButton('·™• ·¥Ä ô·¥è·¥ú·¥õ ·™•', callback_data='about'),
        InlineKeyboardButton('·™•  ú·¥á ü·¥ò ·™•', callback_data='help')],
        [InlineKeyboardButton("·ØΩ …¥·¥Ä Ä·¥ú·¥õ·¥è s ú…™·¥ò·¥ò·¥ú·¥Ö·¥á…¥ ·ØΩ", url='https://t.me/Naruto_Public')]
    ])
    if Config.START_PIC:
        await message.reply_photo(Config.START_PIC, caption=Txt.START_TXT.format(user.mention), reply_markup=button)       
    else:
        await message.reply_text(text=Txt.START_TXT.format(user.mention), reply_markup=button, disable_web_page_preview=True)
   

@Client.on_callback_query()
async def cb_handler(client, query: CallbackQuery):
    data = query.data 
    if data == "start":
        await query.message.edit_text(
            text=Txt.START_TXT.format(query.from_user.mention),
            disable_web_page_preview=True,
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton('·™• ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·™•', url='https://t.me/NARUTOPUBLICST'),
                InlineKeyboardButton('·™• s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·™•', url='https://t.me/SandVillage')],
                [InlineKeyboardButton('·™• ·¥Ä ô·¥è·¥ú·¥õ ·™•', callback_data='about'),
                InlineKeyboardButton('·™•  ú·¥á ü·¥ò ·™•', callback_data='help')],
                [InlineKeyboardButton("·ØΩ …¥·¥Ä Ä·¥ú·¥õ·¥è s ú…™·¥ò·¥ò·¥ú·¥Ö·¥á…¥ ·ØΩ", url='https://t.me/Naruto_Public')]
            ])
        )
    elif data == "help":
        await query.message.edit_text(
            text=Txt.HELP_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("·ØΩ ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä ·ØΩ", url="http://t.me/SAJIIDFF")],
                [InlineKeyboardButton("‚™ª  ô·¥Ä·¥Ñ·¥ã", callback_data = "start"),
                InlineKeyboardButton("·¥Ñ ü·¥ès·¥á ‚™º", callback_data = "close")]
            ])            
        )
    elif data == "about":
        await query.message.edit_text(
            text=Txt.ABOUT_TXT.format(client.mention),
            disable_web_page_preview = True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("·ØΩ  è·¥è·¥ú ·¥õ·¥ú ô·¥á ·ØΩ", url="https://youtube.com/@lyrics__1m")],
                [InlineKeyboardButton("‚™ª  ô·¥Ä·¥Ñ·¥ã", callback_data = "start"),
                InlineKeyboardButton("·¥Ñ ü·¥ès·¥á ‚™º", callback_data = "close")]
            ])            
        )
    elif data == "close":
        try:
            await query.message.delete()
            await query.message.reply_to_message.delete()
            await query.message.continue_propagation()
        except:
            await query.message.delete()
            await query.message.continue_propagation()





@Client.on_message(filters.private & filters.command(["donate", "d"]))
async def donate(client, message):
	text = Txt.DONATE_TXT
	keybord = InlineKeyboardMarkup([
        			[InlineKeyboardButton("‚óé ·¥Ä·¥Ö·¥ç…™…¥ ‚óé",url = "http://t.me/SAJIIDFF"), 
        			InlineKeyboardButton("‚óé ·¥Ñ ü·¥ès·¥á ‚óé",callback_data = "close") ]])
	await message.reply_text(text = text,reply_markup = keybord)



# Jishu Developer 
# Don't Remove Credit ü•∫
# Telegram Channel @JishuBotz
# Developer @JishuDeveloper
